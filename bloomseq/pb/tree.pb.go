// Code generated by protoc-gen-go.
// source: tree.proto
// DO NOT EDIT!

package persist_pb

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Tree_DataType int32

const (
	Tree_Root  Tree_DataType = 0
	Tree_Node2 Tree_DataType = 1
	Tree_Node3 Tree_DataType = 2
	Tree_Leaf  Tree_DataType = 3
)

var Tree_DataType_name = map[int32]string{
	0: "Root",
	1: "Node2",
	2: "Node3",
	3: "Leaf",
}
var Tree_DataType_value = map[string]int32{
	"Root":  0,
	"Node2": 1,
	"Node3": 2,
	"Leaf":  3,
}

func (x Tree_DataType) Enum() *Tree_DataType {
	p := new(Tree_DataType)
	*p = x
	return p
}
func (x Tree_DataType) String() string {
	return proto.EnumName(Tree_DataType_name, int32(x))
}
func (x Tree_DataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Tree_DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Tree_DataType_value, data, "Tree_DataType")
	if err != nil {
		return err
	}
	*x = Tree_DataType(value)
	return nil
}

type Tree struct {
	Type             *Tree_DataType `protobuf:"varint,1,req,enum=persist.pb.Tree_DataType" json:"Type,omitempty"`
	Count            *uint64        `protobuf:"varint,2,req" json:"Count,omitempty"`
	Data             []byte         `protobuf:"bytes,3,opt" json:"Data,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}

func (m *Tree) GetType() Tree_DataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Tree) GetCount() uint64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Tree) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("persist.pb.Tree_DataType", Tree_DataType_name, Tree_DataType_value)
}
